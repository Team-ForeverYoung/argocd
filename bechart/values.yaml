env:
  SPRING_DATASOURCE_URL: "jdbc:mysql://forever-mysql-db.ctouy8o0uopm.ap-northeast-2.rds.amazonaws.com/forever_mysql_db"
  SPRING_DATASOURCE_USERNAME: "admin"
replicaCount: 1

image:
  repository: "911167924085.dkr.ecr.ap-northeast-2.amazonaws.com/forever_registry"
  pullPolicy: IfNotPresent
  tag: "latest"

namespace: "default"

container:
  name: "spring-app-ctn"
  port: 8080


configMap:
  name: "spring-app-config"

secret:
  name: "spring-app-secret"
  

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: false
  automount: true
  annotations: {}
  name: "default" #default사용하다 추후 변경 예정

podAnnotations: {}
podLabels: {}
appLabel: "springboot-app"

podSecurityContext: {}

securityContext: {}
service:
  name: "springboot-service"
  protocol: "TCP"
  type: ClusterIP
  port: 8080
  targetPort: 8080

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi


livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
